// Generated by CoffeeScript 1.8.0
(function () {
    $.extend($.validator.messages, {
        required: "必须填写",
        remote: "请修正此栏位",
        email: "请输入有效的电子邮件",
        url: "请输入有效的网址",
        date: "请输入有效的日期",
        dateISO: "请输入有效的日期 (YYYY-MM-DD)",
        number: "请输入正确的数字",
        digits: "只可输入数字",
        creditcard: "请输入有效的信用卡号码",
        equalTo: "你的输入不相同",
        extension: "请输入有效的后缀",
        maxlength: $.validator.format("最多 {0} 个字"),
        minlength: $.validator.format("最少 {0} 个字"),
        rangelength: $.validator.format("请输入长度为 {0} 至 {1} 之間的字串"),
        range: $.validator.format("请输入 {0} 至 {1} 之间的数值"),
        max: $.validator.format("请输入不大于 {0} 的数值"),
        min: $.validator.format("请输入不小于 {0} 的数值")
    });

    (function () {
        var addMethod_bluetooth, addMethod_cellphone, addMethod_companyname, addMethod_datetime, addMethod_digits2, addMethod_identity, addMethod_money, addMethod_nickname, addMethod_telephone;
        addMethod_money = function (value, element) {
            return this.optional(element) || /^\d+(\.\d{0,2})?$/.test(value);
        };
        $.validator.addMethod("money", addMethod_money, jQuery.validator.format("保留两位小数"));
        addMethod_datetime = function (value, element) {
            var reg;
            reg = /^\d{4}-(0?[1-9]|1[012])-(0?[1-9]|[12][0-9]|3[01])\s([0-1]?[0-9]|2[0-3]):([0-5]?[0-9])$/;
            return this.optional(element) || reg.test(value);
        };
        $.validator.addMethod("datetime", addMethod_datetime, jQuery.validator.format("日期到分钟"));
        addMethod_bluetooth = function (value, element) {
            var reg;
            reg = /^([a-zA-Z0-9]{2}:){5}[a-zA-Z0-9]{2}$/;
            return this.optional(element) || reg.test(value);
        };
        $.validator.addMethod("bluetooth", addMethod_bluetooth, jQuery.validator.format("蓝牙地址"));
        addMethod_digits2 = function (value, element) {
            var reg;
            reg = /^[1-9][\d]*$/;
            return this.optional(element) || reg.test(value);
        };
        $.validator.addMethod("digits2", addMethod_digits2, jQuery.validator.format("digits2"));
        addMethod_telephone = function (value, element) {
            var reg;
            reg = /^[0-9\s-]{7,16}$/;
            return this.optional(element) || reg.test(value);
        };
        $.validator.addMethod("telephone", addMethod_telephone, jQuery.validator.format("联系电话"));
        addMethod_cellphone = function (value, element) {
            var reg;
            reg = /^1[0-9]{10}$/;
            return this.optional(element) || reg.test(value);
        };
        $.validator.addMethod("cellphone", addMethod_cellphone, jQuery.validator.format("手机号"));

        addMethod_nickname = function (value, element) {
            var reg;
            reg = /^[\u2E80-\u9FFF\w]{1,16}$/;
            return this.optional(element) || reg.test(value);
        };
        $.validator.addMethod("nickname", addMethod_nickname, jQuery.validator.format("姓名"));
        addMethod_companyname = function (value, element) {
            return this.optional(element) || value.length <= 28;
        };
        $.validator.addMethod("companyname", addMethod_companyname, jQuery.validator.format("公司名"));
        addMethod_identity = function (value, element) {
            var reg;
            reg = /^[0-9a-zA-Z]{16,20}$/;
            return this.optional(element) || reg.test(value);
        };
        $.validator.addMethod("identity", addMethod_identity, jQuery.validator.format("身份证"));

        $.validator.addMethod("wordandnum", function (value, element) {
            var reg= /^[0-9a-zA-Z]+$/;
            return this.optional(element) || reg.test(value);
        }, jQuery.validator.format("数字字母"));
    })();



    yc.dialog = {
        modal: true,
        width: 600,
        autoOpen: false,
        resizable: false
    };

    yc.upload = {
        onError: function (error) {
            switch (error) {
                case 'F_EXCEED_SIZE':
                    return alert('文件过大');
                case 'Q_TYPE_DENIED':
                    return alert('文件格式不支持！');
                default:
                    return alert('文件添加失败：' + error);
            }
        },
        imageUpload: function (set) {
            var uploader;
            uploader = WebUploader.create($.extend({}, {
                swf: window.ywxURL+'/skin/webuploader/Uploader.swf',
                server: window.ywxURL+'/storeUser/uploadDrivingLicense',
                auto: true,
                fileSingleSizeLimit: 5 * 1024 * 1024,
                multiple: false,
                accept: {
                    title: 'Images',
                    extensions: 'gif,jpg,jpeg,bmp,png',
                    mimeTypes: 'image/*'
                }
            }, set));
            var setHeader = function(object, data, headers) {
            	headers['Access-Control-Allow-Origin'] = '*';
                headers['Access-Control-Request-Headers'] = 'content-type';
                headers['Access-Control-Request-Method'] = 'POST';
            }
            uploader.on('uploadBeforeSend ', setHeader);
            uploader.on('error', this.onError);
            uploader.on('uploadSuccess', function (file, response) {
                var $btn, $inp;
                this.removeFile(file, true);
                $inp = $(this.options.pick + '_inp');
                $btn = $(this.options.pick);
                if (response.result.success) {
                    $inp.val(response.data.fileName);
                    $btn.css({
                        'background-image': 'url("' + response.data.url + '")'
                    });
                } else {
                    alert(response.result.errors);
                }
            });
            uploader.on('uploadError', function (file,reason) {

            });
            return uploader;
        },
        fileUpload: function (set) {
            var uploader;
            uploader = WebUploader.create($.extend({}, {
                swf: window.ywxURL+'/skin/webuploader/Uploader.swf',
                server: window.ywxURL+'/storeUser/uploadDrivingLicense',
                auto: true,
                fileSingleSizeLimit: 5 * 1024 * 1024,
                multiple: false
            }, set));

            var setHeader = function(object, data, headers) {
            	headers['Access-Control-Allow-Origin'] = '*';
                headers['Access-Control-Request-Headers'] = 'content-type';
                headers['Access-Control-Request-Method'] = 'POST'
            }
            uploader.on('uploadBeforeSend ', setHeader);
            uploader.on('error', this.onError);
            uploader.on('uploadSuccess', function (file, response) {
                var $inp;
                this.removeFile(file, true);
                $inp = $(this.options.pick + '_inp');
                if (response.result.success) {
                    return $inp.val(response.data.fileName);
                } else {
                    return alert(response.result.errors);
                }
            });
            uploader.on('uploadError', function (file,reason) {

            });
            $(window).resize();
            return uploader;
        }
    };

    yc.AreaSelect = (function () {
        function AreaSelect(sel1, sel2, arr) {
            this.sel1 = $(sel1);
            this.sel2 = $(sel2);
            this.jsonArr = arr;
            this.getP();
            this.sel1.val(this.sel1.data('def'));
            this.getC(this.sel1.val()).val(this.sel2.data('def'));
        }

        AreaSelect.prototype.clear = function () {
            return this.sel2.children('option:gt(0)').remove();
        };

        AreaSelect.prototype.getP = function () {
            var options;
            options = '';
            $.each(this.jsonArr, (function (_this) {
                return function (i, n) {
                    return options += "<option value='" + n.provinceId + "'>" + n.provinceName + "</option>";
                };
            })(this));
            return this.sel1.append(options);
        };

        AreaSelect.prototype.getC = function (pid) {
            var options;
            options = '';
            $.each(this.jsonArr, function (i, n) {
                if (pid === n.provinceId) {
                    return $.each(n.scities, function (i, n) {
                        return options += "<option value='" + n.cityId + "'>" + n.cityName + "</option>";
                    });
                }
            });
            this.clear();
            return this.sel2.append(options);
        };

        return AreaSelect;

    })();

    $(function () {
        return $('.yc-panel,.yc-panel2').each(function () {
            var $bodys, $titles, panel;
            panel = $(this);
            $titles = panel.find('>.title li');
            $bodys = panel.find('>.body');
            if ($bodys.length > 1) {
                return yc.paneltab($titles, $bodys);
            }
        });
    });

}).call(this);
