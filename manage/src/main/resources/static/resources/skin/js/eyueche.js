// Generated by CoffeeScript 1.8.0
(function() {
  var baseUrl, yc;

  yc = window.yc = {};

  baseUrl = window.ywxURL+'/';

  yc.SStore = {
    get: function(key, callback) {
      if (window.sessionStorage[key] !== void 0) {
        return callback(JSON.parse(window.sessionStorage[key]));
      } else {
        switch (key) {
          case 'user':
            return $.post(baseUrl + 'user/getLoginUser', function(data) {
              window.sessionStorage.user = JSON.stringify(data);
              return callback(JSON.parse(window.sessionStorage[key]));
            });
          case 'org':
            return $.post(baseUrl + 'user/findOrgByUser', function(data) {
              window.sessionStorage.org = JSON.stringify(data.data);
              return callback(JSON.parse(window.sessionStorage[key]));
            });
          case 'roles':
            return $.post(baseUrl + 'user/findRolesByUser', function(data) {
              window.sessionStorage.roles = JSON.stringify(data.data);
              return callback(JSON.parse(window.sessionStorage[key]));
            });
          case 'roles_admin':
            return $.post(baseUrl + 'user/findRolesByUser_admin', function(data) {
              window.sessionStorage.roles_admin = JSON.stringify(data.data);
              return callback(JSON.parse(window.sessionStorage[key]));
            });
          case 'AllOrg':
            return $.post(baseUrl + 'user/findAllOrg', function(data) {
              window.sessionStorage.AllOrg = JSON.stringify(data.data);
              return callback(JSON.parse(window.sessionStorage[key]));
            });
        }
      }
    },
    clear: function(key) {
      if (key !== void 0) {
        return window.sessionStorage.removeItem(key);
      } else {
        return window.sessionStorage.clear();
      }
    }
  };

  yc.SStore.clear();

  yc.Pager = (function() {
    function Pager(opt) {
      this.table = $(opt.table);
      this.page = this.table.next('.yueche-pager');
      this.base = opt.base;
      this.listTpl = $.templates(opt.tpl);
      this.formdata = $.extend({
        limit: 20,
        start: 0
      }, opt.formdata);
      this.page.on('click', 'a', (function(_this) {
        return function(e) {
          e.preventDefault();
          _this.formdata.start = $(e.currentTarget).data('start');
          if (_this.formdata.start > _this.formdata._max) {
            _this.formdata.start = _this.formdata._max - _this.formdata.limit;
          }
          if (_this.formdata.start < 0) {
            _this.formdata.start = 0;
          }
          return _this.getList();
        };
      })(this));
    }

    Pager.prototype.pageTpl = (function() {
      return $.templates('当前共 {{:totalRowCount}} 条，当前第{{:currentPageNum}}/{{:totalPageCount}}页\n<a class="first" data-start="0" href="#">&nbsp;</a>|\n<a class="prev" data-start="{{:start-limit}}" href="#">&nbsp;</a> |\n<a class="next" data-start="{{:start+limit}}" href="#">&nbsp;</a>|\n<a class="last" data-start="{{:totalRowCount-limit}}" href="#">&nbsp;</a>');
    })();

    Pager.prototype.setFormdata = function(data) {
      return $.extend(this.formdata, data);
    };

    Pager.prototype.getList = function() {
      return $.post(this.base, this.formdata, (function(_this) {
        return function(data) {
          var list;
          if (data.result.success === true) {
            list = [];
            $.each(data.data.list, function(i, n) {
              n.jsonstr = JSON.stringify(n);
              return list.push(n);
            });
            _this.table.find('tbody').html(_this.listTpl.render(list));
            _this.page.html(_this.pageTpl.render(data.data.pageInfo)).show();
            _this.formdata._max = data.data.pageInfo.totalRowCount;
            return _this.formdata.start = data.data.pageInfo.start;
          } else {
            return alert(data.result.errors);
          }
        };
      })(this));
    };

    return Pager;

  })();

  yc.formtoJson = function($form) {
    var data;
    data = {};
    $.each($form.serializeArray(), function(i, n) {
      var key;
      if (/\[\]$/.test(n.name)) {
        key = n.name.slice(0, -2);
        if (data[key] === void 0) {
          data[key] = [];
        }
        return data[key].push(n.value);
      } else {
        return data[n.name] = n.value;
      }
    });
    return data;
  };


  /*
    panel 切换卡功能
   */

  yc.paneltab = function($titles, $bodys) {
    var getshow = function(index) {
      $titles.removeClass('active').eq(index).addClass('active');
      $bodys.hide().eq(index).show();
    };
    return $titles.on('click', function() {
      if (yc.paneltab.tabBefor($(this))) {
        getshow($titles.index(this));
      }
    });
  };

  yc.paneltab.tabBefor = function($title) {
    return true;
  };


  /*
    选择区域弹窗
   */

  yc.areaDialog = function(user, org) {
    var dialog, getChildren, gethtml, tpl;
    dialog = $('<div>').dialog({
      autoOpen: false,
      resizable: false,
      modal: true,
      title: '选择机构',
      width: 400,
      minHeight: 300
    });
    tpl = (function() {
      if ($('#dialog_area_tpl').length === 0) {
        $('body').append('<script id="dialog_area_tpl" type="text/jsrender">\n<ul>\n  {{for _children}}\n    <li>\n    <div class="item" data-id=\'{{:id}}\' data-name=\'{{:menuName}}\' data-level=\'{{:level}}\' data-parentId=\'{{:parentId}}\' title=\'{{:menuName}}\'>{{:menuName}}\n      <a href="#">选择</a>\n    </div>\n  {{include tmpl=\'#dialog_area_tpl\' /}}\n     </li>\n  {{/for}}\n</ul>\n</script>');
      }
      return $('#dialog_area_tpl');
    })();
    getChildren = function(data, id) {
      var arr;
      if (id == null) {
        id = null;
      }
      arr = [];
      $.each(data, function(i, n) {
        if (id === n.parentId) {
          return arr.push(n);
        }
      });
      if (arr.length > 0) {
        $.each(arr, function(i, n) {
          return arr[i]._children = getChildren(data, n.id);
        });
      }
      return arr;
    };
    gethtml = function(user, org) {
      var list, str;
      str = '';
      list = {};
      switch (user.userLevel) {
        case 1:
          list._children = getChildren(org);
          str = tpl.render(list);
          break;
        case 2:
          $.each(org, function(i, n) {
            if (n.id === user.districtId) {
              return list._children = n;
            }
          });
          list._children._children = getChildren(org, user.districtId);
          str = "<strong>" + user.companyName + "</strong>";
          str += tpl.render(list);
      }
      return str;
    };
    dialog.html(gethtml(user, org));
    dialog.find('ul:first').addClass('yc-drop1');
    dialog.on('click', '.item', function() {
      return $(this).next('ul').toggle();
    });
    return dialog;
  };


  /*
    日期计算
    a:初始开始日期对象，b:初始结束日期对象
   */

  /*yc.getDateRange = function(a, b) {
    var endTime, startTime;
    startTime = this.getTime(a);
    endTime = this.getTime(b);
    if (startTime === false || endTime === false) {
      return false;
    } else {
      return Math.ceil((startTime - endTime) / (1000 * 60 * 60 * 24));
    }
  };*/


  /*
    根据输入返回时间戳
   */

  /*yc.getTime = function(str) {
    var time;
    time = false;
    if (typeof str === 'string') {
      time = new Date(Date.parse(str.replace(/-/g, "/"))).getTime();
    } else if (str instanceof Date) {
      time = str.getTime();
    } else if (typeof str === 'number') {
      time = str;
    }
    return time;
  };*/

}).call(this);
